/*
#
#   Python backend and Angular frontend code generation by gencrud
#   Copyright (C) 2018-2020 Marc Bertens-Nguyen m.bertens@pe2mbs.nl
#
#   This library is free software; you can redistribute it and/or modify
#   it under the terms of the GNU Library General Public License GPL-2.0-only
#   as published by the Free Software Foundation.
#
#   This library is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License GPL-2.0-only along with this library; if not, write to the
#   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
#   Boston, MA 02110-1301 USA
#
#   gencrud: ${date} version ${version} by user ${username}
*/
import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { GcProfileService } from 'src/app/layouts/profile/profile.service';
import { TableDefintion } from 'src/app/modules/demo/table-http-example';
import { ${ obj.cls }Record } from './model';
% if obj.Mixin.Angular.hasTableComponent():
import { ${obj.Mixin.Angular.TableComponent.cls} } from '${obj.Mixin.Angular.TableComponent.filename}';
% endif
% if ( obj.actions.get( 'new' ).type == 'dialog' and obj.actions.get( 'new' ).position != 'none' ) or ( obj.actions.get( 'edit' ).type == 'dialog' and obj.actions.get( 'edit' ).position != 'none' ):
import { Dialog${ obj.cls }Component } from './dialog.component';
% endif
import { ${ obj.cls }DataService } from './service';
% for field in obj.table.columns:
 % if field.ui is not None and ( field.ui.isChoice() or field.ui.isCombobox() ):
   % if field.ui.service is not None:
import { ${field.ui.service.cls} } from '${ field.ui.service.path }';
   % endif
 % endif
% endfor


@Component({
    // tslint:disable-next-line:component-selector
    selector: 'app-${ obj.name }-table',
    template: `<app-cust-data-table
				class="card-content"
				[definition]="definition">
</app-cust-data-table>`,
    styleUrls: [ '../../layouts/common-mat-card.scss' ]
})
% if obj.Mixin.Angular.hasTableComponent():
export class ${ obj.cls }TableComponent extends ${ obj.Mixin.Angular.TableComponent.cls }
% else:
export class ${ obj.cls }TableComponent
% endif
{
    public definition: TableDefintion<${ obj.cls }Record> = {
        toggleUpdate: ${ 'true' if obj.hasAutoUpdate() else 'false' },
        name: '${ obj.cls }Table',
		helpTopic: '${ obj.name }-table',
		defaultSortField: '${ obj.table.orderBy[ 0 ] }',
		defaultSortDirection: 'desc',
		sortDisableClear: true,
        headerButtons: [
% for button in obj.actions.getHeaderButtons():
			{
				label: '${ button.label }',
				icon: '${ button.icon }',
				action: (core: any, self: any) => {
					self.${ button.function };
				}
			},
% endfor
		],
		footerButtons: [
% for button in obj.actions.getFooterButtons():
			{
				label: '${ button.label }',
				icon: '${ button.icon }',
				action: (core: any, self: any) => {
					${ button.function };
				}
			},
% endfor
		],
        rowDoubleClick: (core: any, self: any, idx: number, row: ${ obj.cls }Record) => {
% if obj.actions.get( 'edit' ).position == 'row':
			${ obj.actions.get( 'edit' ).function };
% endif
		},
		columns: [
% for column in obj.table.listViewColumns:
            {
                columnDef: '${ column.name }',
				header: ${ '"{}"'.format( column.label ) },
				display: ${ 'true' if len( column.listview ) > 0 else 'false' },
				width: "${ column.listview.get( 'width', '' ) }",
				filter: ${ column.listview.get( 'filter', 'false' ) },
				sort: ${ column.listview.get( 'sort', 'false' ) },
				cell: (row: ${ obj.cls }Record) => row.${ column.name }
%  if column.hasService():
              , dataService: ( self: any ) => self.${ column.ui.service.name }Service
%  elif column.hasResolveList():
              , resolveList: ( value ) => {
                    const dataList = ${ column.ui.typescriptResolveList };
                    return dataList[ value ]
                }
%  endif
            },
% endfor
% if obj.actions.hasRowButtons():
            {
                columnDef: null,
				display: true,
				header: 'Options',
				width: '70px',
				cell: (row: ${ obj.cls }Record) => {},
                buttons: [
%  for button in obj.actions.getCellButtons():
                    {
						label: '${ button.label }',
						icon: '${ button.icon }',
						action: (core: any, self: any, idx: number, row: ${ obj.cls }Record) => {
							${button.function};
						}
					},
%  endfor
                ]
            }
% endif
        ]
    };

    constructor( dataService: ${ obj.cls }DataService
               , profileService: GcProfileService
               , protected dialog: MatDialog
               , public router: Router
${ obj.externalService } )
    {
        this.definition.dataService = dataService;
		this.definition.profileService = profileService;
		this.definition.dialog = dialog;
		this.definition.self = this;
        return;
    }

    public addRecord(): void
	{
	    console.log( 'addRecord()' );
% if obj.actions.isDialog( 'new' ):
        const newRecord = new ${ obj.cls }Record();
        const options: MatDialogConfig = {
            data: { record: newRecord,
                    mode: 'add' },
            height: "${ ( 6 * 72 ) + 130 }px",
        };
        const dialogRef = this.dialog.open( Dialog${ obj.cls }Component, options );
        dialogRef.afterClosed().subscribe( result =>
        {
            console.log( 'addNew() dialog result ', result );
            this.definition.profileService.changeEvent.emit();
        } );
% else:
        this.router.navigate( ['/${ obj.name }/edit'], {
			queryParams: { mode: 'new' }
		} );
% endif
		return;
	}

    public editRecord( idx: number, row: ${ obj.cls }Record ): void
	{
% if obj.actions.isDialog( 'edit' ):
        this.definition.dataService.lockRecord( row );
        const options: MatDialogConfig = {
            data: { record: row,
                    mode: 'add' },
            height: "${ ( 6 * 72 ) + 190 }px",
        };
        const dialogRef = this.dialog.open( Dialog${ obj.cls }Component, options );
        dialogRef.afterClosed().subscribe( result =>
        {
            console.log( 'editRecord() dialog result ', result );
            this.definition.dataService.unlockRecord( row );
            this.definition.profileService.changeEvent.emit();
        } );
% else:
        this.router.navigate( ['/${ obj.name }/edit'], {
			queryParams: { 	id: '${ obj.table.primaryKey }', mode: 'edit', value: row.${ obj.table.primaryKey } }
		} );
% endif
        return;
	}
}
